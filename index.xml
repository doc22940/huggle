<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Huggle. </title>
    <link>http://ktmud.github.io/huggle/</link>
    <language>en</language>
    <author>Jesse Yang</author>
    <rights>Copyright (c) 2008 - 2013, Jesse Yang; all rights reserved.</rights>
    <updated>2014-03-08 16:59:35 &#43;0800 &#43;0800</updated>
    
    <item>
      <language>zh</language>
      <title>Hugo &#43; gulp.js = Huggle.</title>
      <link>http://ktmud.github.io/huggle/zh/intro/</link>
      <pubDate>Sat, 08 Mar 2014 16:59:35 &#43;0800</pubDate>
      <author>Jesse Yang</author>
      <guid>http://ktmud.github.io/huggle/zh/intro/</guid>
      <description>

&lt;h2 id=&#34;这是什么:58caf3bc885325a580f944573ab944f3&#34;&gt;这是什么？&lt;/h2&gt;

&lt;p&gt;Huggle 并非一个全新的工具，它只是整合 Hugo + gulp.js 两大工具的一个示范，
目标是帮助你&lt;strong&gt;更快速地构建静态网站&lt;/strong&gt;，如个人博客、公司/项目主页、作品集网站等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; 是用 Go 语言编写的静态页面生成工具，
与 &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt; 等工具类似。Hugo 的最大特点就是快，构建一个包含 200+ 篇文章的博客，
只需要几秒钟。对于如何生成页面，它提供了大量既符合直觉又相当灵活的自定义选项，
但对喜欢自己编写网站模版样式的设计师和前端工程师来说，使用 Hugo 还有一点障碍 —— css/js 的打包工具仍需单独配置。&lt;/p&gt;

&lt;p&gt;为了不让前端构建过程拖后腿， Huggle 将同样以快著称的 &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt; 与 Hugo 结合在一起，
为你演示构建静态网站的速度极限。&lt;/p&gt;

&lt;h2 id=&#34;开始使用:58caf3bc885325a580f944573ab944f3&#34;&gt;开始使用&lt;/h2&gt;

&lt;p&gt;要开始使用 Huggle ，仅需两步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;下载Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ktmud/huggle&#34;&gt;克隆本仓库&lt;/a&gt;，使用 &lt;code&gt;make init&lt;/code&gt; 初始化环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;步骤一中下载到的符合你系统版本的可执行文件，需要添加到 $PATH 目录（&lt;a href=&#34;http://hugo.spf13.com/overview/installing&#34;&gt;详细&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;安装完成，执行 &lt;code&gt;make watch&lt;/code&gt; ，即可在开始在 &lt;code&gt;content/&lt;/code&gt; 目录下编辑你的文章。&lt;/p&gt;

&lt;h2 id=&#34;进阶:58caf3bc885325a580f944573ab944f3&#34;&gt;进阶&lt;/h2&gt;

&lt;h3 id=&#34;改善开发体验:58caf3bc885325a580f944573ab944f3&#34;&gt;改善开发体验&lt;/h3&gt;

&lt;p&gt;Huggle 打包了大量流行的开发者福利：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei&#34;&gt;livereload&lt;/a&gt;，
保存文件浏览器将自动刷新。得益于 Hugo 和 gulp.js 的极限速度，你甚至都还没来得及切换窗口，页面就已更新完毕。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;http://browserify.org/&#34;&gt;browserfy&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/substack/coffeeify&#34;&gt;coffeeify&lt;/a&gt; ，
你可以在 &lt;code&gt;./template/assets&lt;/code&gt; 目录按照 nodejs 的 &lt;code&gt;require&lt;/code&gt; 用法来书写浏览器脚本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./template/assets/styles&lt;/code&gt; 目录是样式文件的源代码，所有目录结构都可以在 &lt;code&gt;gulpfile.js&lt;/code&gt; 里修改，
你也可以按照自己的习惯将 sass 换成习惯的 less 或 stylus ，只需安装相应的 &lt;a href=&#34;http://gulpjs.com/plugins/&#34;&gt;gulp 插件&lt;/a&gt;即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;多语言支持:58caf3bc885325a580f944573ab944f3&#34;&gt;多语言支持&lt;/h3&gt;

&lt;p&gt;通过添加一些自定义参数，以及按条理组织 Url ，你可以利用 Hugo 轻松搭建多语言网站：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;config.yaml&lt;/code&gt; 中设定你的默认语言&lt;/li&gt;
&lt;li&gt;在 markdown 头部的 &lt;a href=&#34;http://hugo.spf13.com/content/front-matter&#34;&gt;front matter&lt;/a&gt; 里添加 &lt;code&gt;lang: zh&lt;/code&gt; 参数。标准语言代码可以参考&lt;a href=&#34;http://www.w3schools.com/tags/ref_language_codes.asp&#34;&gt;这里&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;为了将某一语言的文件都组织在同一目录下，指定文档网址： &lt;code&gt;slug: /zh/article-title-goes-here&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;指定此文章其他语言版本的链接：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;otherlangs: [&amp;quot;en&amp;quot;]
otherurls: [&amp;quot;/en/article-title&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如本文&lt;a href=&#34;https://raw.github.com/ktmud/huggle/master/content/intro.zh.md&#34;&gt;源码所示&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title: Hugo + gulp.js = Huggle.
subtitle: 速度极快的静态网站构建工具
date: 2014-03-04
slug: zh/intro/

lang: zh
otherlangs: [&amp;quot;en&amp;quot;]
otherurls: [&amp;quot;/intro/&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编辑模版:58caf3bc885325a580f944573ab944f3&#34;&gt;编辑模版&lt;/h2&gt;

&lt;p&gt;Hugo 使用 golang 的 &lt;a href=&#34;http://golang.org/pkg/text/template/&#34;&gt;text/template&lt;/a&gt; ，语法极为简单。
你可以在 go 的官方文档或者 &lt;a href=&#34;http://hugo.spf13.com/layout/go-templates&#34;&gt;Hugo的文档&lt;/a&gt; 里详细了解。&lt;/p&gt;

&lt;p&gt;下面是一些官方文档里可能没有提及的东西：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;模版语句内的字符串实体必须用双引号&lt;/li&gt;
&lt;li&gt;双括弧两边必须留有空格&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此，对于语句：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ template &amp;quot;chrome/includes.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;双引号（&lt;code&gt;&amp;quot;&lt;/code&gt;）不能写作单引号，&lt;code&gt;.&lt;/code&gt; 后面的空格也不能省略。&lt;/p&gt;

&lt;h3 id=&#34;条件判断:58caf3bc885325a580f944573ab944f3&#34;&gt;条件判断&lt;/h3&gt;

&lt;p&gt;如果不等于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ if ne .Url &amp;quot;/&amp;quot; }}
  &amp;lt;a href=&amp;quot;{{ .Site.BaseUrl }}&amp;quot;&amp;gt;Back Home&amp;lt;/a&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ if not (eq .Url &amp;quot;/&amp;quot;) }}
  &amp;lt;a href=&amp;quot;{{ .Site.BaseUrl }}&amp;quot;&amp;gt;Back Home&amp;lt;/a&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两个条件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ if or (ne .Url &amp;quot;/&amp;quot;) (ne .Url &amp;quot;/en/&amp;quot;) }}
  &amp;lt;a href=&amp;quot;{{ .Site.BaseUrl }}&amp;quot;&amp;gt;Back Home&amp;lt;/a&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有 &lt;code&gt;unless&lt;/code&gt; ，但是可以 &lt;code&gt;if not&lt;/code&gt; 。除了 &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;，还有还有 &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;，
分别代表小于、小于等于、大于、大于等于。&lt;/p&gt;

&lt;h3 id=&#34;context-和循环枚举:58caf3bc885325a580f944573ab944f3&#34;&gt;Context 和循环枚举&lt;/h3&gt;

&lt;p&gt;设 &lt;code&gt;.Params.tags&lt;/code&gt; 为一个数组：&lt;code&gt;[&#39;标签1&#39;, &#39;标签2&#39;]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ range .Params.tags }}
  &amp;lt;a href=&amp;quot;{{ $.Site.Params.baseurl }}tag/{{ . }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意你可以使用 &lt;code&gt;{{ $.OuterValue }}&lt;/code&gt; 获取一个 Context 外部的变量(&lt;a href=&#34;http://stackoverflow.com/questions/14800204/in-a-template-how-do-you-access-an-outer-scope-while-inside-of-a-with-or-rang&#34;&gt;via&lt;/a&gt;)。&lt;/p&gt;

&lt;h3 id=&#34;时间格式化:58caf3bc885325a580f944573ab944f3&#34;&gt;时间格式化&lt;/h3&gt;

&lt;p&gt;使用类似于 &lt;code&gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot; }}&lt;/code&gt; 来格式化时间。
注意，这些月份和时间的数字&lt;a href=&#34;http://stackoverflow.com/questions/14106541/go-parsing-date-time-030strings-which-are-not-standard-formats&#34;&gt;并非它看起来那么随意&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;可用数字一览表：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    stdLongMonth      = &amp;quot;January&amp;quot;
    stdMonth          = &amp;quot;Jan&amp;quot;
    stdNumMonth       = &amp;quot;1&amp;quot;
    stdZeroMonth      = &amp;quot;01&amp;quot;
    stdLongWeekDay    = &amp;quot;Monday&amp;quot;
    stdWeekDay        = &amp;quot;Mon&amp;quot;
    stdDay            = &amp;quot;2&amp;quot;
    stdUnderDay       = &amp;quot;_2&amp;quot;
    stdZeroDay        = &amp;quot;02&amp;quot;
    stdHour           = &amp;quot;15&amp;quot;
    stdHour12         = &amp;quot;3&amp;quot;
    stdZeroHour12     = &amp;quot;03&amp;quot;
    stdMinute         = &amp;quot;4&amp;quot;
    stdZeroMinute     = &amp;quot;04&amp;quot;
    stdSecond         = &amp;quot;5&amp;quot;
    stdZeroSecond     = &amp;quot;05&amp;quot;
    stdLongYear       = &amp;quot;2006&amp;quot;
    stdYear           = &amp;quot;06&amp;quot;
    stdPM             = &amp;quot;PM&amp;quot;
    stdpm             = &amp;quot;pm&amp;quot;
    stdTZ             = &amp;quot;MST&amp;quot;
    stdISO8601TZ      = &amp;quot;Z0700&amp;quot;  // prints Z for UTC
    stdISO8601ColonTZ = &amp;quot;Z07:00&amp;quot; // prints Z for UTC
    stdNumTZ          = &amp;quot;-0700&amp;quot;  // always numeric
    stdNumShortTZ     = &amp;quot;-07&amp;quot;    // always numeric
    stdNumColonTZ     = &amp;quot;-07:00&amp;quot; // always numeric
)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <language>en</language>
      <title>Hugo &#43; gulp.js = Huggle.</title>
      <link>http://ktmud.github.io/huggle/en/intro/</link>
      <pubDate>Sat, 08 Mar 2014 16:59:24 &#43;0800</pubDate>
      <author>Jesse Yang</author>
      <guid>http://ktmud.github.io/huggle/en/intro/</guid>
      <description>

&lt;h2 id=&#34;introduction:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Huggle&lt;/strong&gt; is a simple demonstation of how to integrate
&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; + &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt; with multi-language support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugo&lt;/strong&gt; is a fast and flexible static site generator written in Go.
It does an amazing job in organizing, templating and building contents.
&lt;strong&gt;Gulp.js&lt;/strong&gt; is a streaming build system (mostly) for front-end code, which is also super fast.&lt;/p&gt;

&lt;p&gt;Huggle to Hugo, is much like &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; to &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt;.
But with the ability to reuse what node.js compunity has offered.&lt;/p&gt;

&lt;p&gt;You may have seen some equivalents in pure node.js, like &lt;a href=&#34;http://assemble.io/&#34;&gt;Assemble&lt;/a&gt;.
But unfortunately, they are just not fast enough.&lt;/p&gt;

&lt;p&gt;To gain more speed and ease, let&amp;rsquo;s try
&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; + &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt;. The two are both designed to be
the fastest of its kind.&lt;/p&gt;

&lt;p&gt;By running two tasks &amp;ndash; &lt;strong&gt;generating html from organized markdowns&lt;/strong&gt; and
&lt;strong&gt;building programmable css/js&lt;/strong&gt;, seperately, we gain the maximum speed and flexibility.&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-benefits:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;What are the benefits?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build a 200+ blogs site in seconds&lt;/li&gt;
&lt;li&gt;Edit, save, and see live changes in less than one second&lt;/li&gt;
&lt;li&gt;Write site UI in coffee/stylus/sass/less, anything you like&lt;/li&gt;
&lt;li&gt;Write browser code like your are in node.js&lt;/li&gt;
&lt;li&gt;Lightweight client site or pre-rendered syntax highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quick-start:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Quick start&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://hugo.spf13.com/overview/installing&#34;&gt;Install hugo&lt;/a&gt; //
Long story short: &lt;code&gt;brew install hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a site: &lt;code&gt;hugo new site /path/to/site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /path/to/site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/ktmud/huggle.git theme/huggle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd them/huggle &amp;amp;&amp;amp; make init&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to update the appearance of your site, you can just for the theme and update source files under &amp;ldquo;static/assets&amp;rdquo; and &amp;ldquo;layouts&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When you are ready to publish your site, use &lt;code&gt;make gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;dive-in:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Dive in&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t forget to check out docs on &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extras:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Extras&lt;/h2&gt;

&lt;h3 id=&#34;syntax-highlighting:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Syntax Highlighting&lt;/h3&gt;

&lt;p&gt;Hugo comes with a built in Syntax Highlighting support, based on &lt;a href=&#34;http://pygments.org/&#34;&gt;pygments&lt;/a&gt;.
To maximize the build speed, &lt;a href=&#34;http://prismjs.com/&#34;&gt;Prism.js&lt;/a&gt; is used by Huggle, so you can just write Github flavored
code block, then render syntax highlighting on the client side.&lt;/p&gt;

&lt;pre class=&#34;language-markdown&#34;&gt;

```javascript
console.log(&#34;Give me a Huggle!&#34;)
```
&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(&amp;quot;Give me a Huggle!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;trouble-shooting:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Trouble shooting&lt;/h3&gt;

&lt;h4 id=&#34;rendering-error-html-template-xxx-html-is-an-incomplete-template:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Rendering error: html/template: &amp;ldquo;xxx.html&amp;rdquo; is an incomplete template&lt;/h4&gt;

&lt;p&gt;It is because there is grammer error in your golange html template.
Remember, you can only use double quote for strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gotmpl&#34;&gt;{{ template &amp;quot;chrome/includes.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;&amp;quot;&lt;/code&gt; instead of &lt;code&gt;&#39;&lt;/code&gt;, and blankspace after the &lt;code&gt;.&lt;/code&gt; are all mandatory.&lt;/p&gt;

&lt;h3 id=&#34;limitations:9d57c7ccdb90ef7cc77b9187d39df5d0&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;Hugo is relative new, there are some limitations if you want to try it now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;no pagination support yet&lt;/li&gt;
&lt;li&gt;will rebuild the whole site when changes detected by &lt;code&gt;hugo --watch&lt;/code&gt;,
though total time consumed may be negligible.&lt;/li&gt;
&lt;li&gt;no easy way to import a Wordpress/jekyll blog yet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/spf13/hugo/blob/master/docs/content/meta/roadmap.md&#34;&gt;roadmap&lt;/a&gt; for what&amp;rsquo;s missing (and coming) now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <language>en</language>
      <title>Huggle.</title>
      <link>http://ktmud.github.io/huggle/en/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 UTC</pubDate>
      <author>Jesse Yang</author>
      <guid>http://ktmud.github.io/huggle/en/</guid>
      <description>&lt;p&gt;&lt;p class=&#34;intro&#34;&gt;
Combine the power of &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; + &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt;,
now you can &lt;br&gt;
&lt;strong&gt;edit / preview / serve&lt;/strong&gt;
a site in milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../media/huggle-demo.gif&#34; alt=&#34;screen cast&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; href=&#34;intro/&#34;&gt;See how it works&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <language>zh</language>
      <title>Huggle.</title>
      <link>http://ktmud.github.io/huggle/zh/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 UTC</pubDate>
      <author>Jesse Yang</author>
      <guid>http://ktmud.github.io/huggle/zh/</guid>
      <description>&lt;p&gt;&lt;p class=&#34;intro&#34;&gt;
整合两大极速工具：&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; + &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp.js&lt;/a&gt;，&lt;br&gt;
&lt;strong&gt;编辑 / 预览 / 部署&lt;/strong&gt; 一个站点能以毫秒记。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../media/huggle-demo.gif&#34; alt=&#34;screen cast&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a class=&#34;btn btn-primary btn-lg&#34; href=&#34;intro/&#34;&gt;详细了解 &amp;raquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
